require 'minitest/autorun'
require 'grpc/orin3/provider'

module ORiN3
  include Message::ORiN3::Common::V1::AutoGenerated
  include Message::ORiN3::Provider::V1::AutoGenerated::RootObject
  include Message::ORiN3::Provider::V1::AutoGenerated::Variable
end

class RootObjectServiceMockServer < ORiN3::RootObjectService::Service
  attr_accessor :response_values

  def initialize
    @response_values = {
      result_code: 0,
      detail: "",
      user_defined_id: "\x12\x34\x56\x78\x9A\xBC\xDE\xF0".b,
      root_object_id: "\x12\x34\x56\x78\x9A\xBC\xDE\xF0".b
    }
  end

  def get_root_object_id(request, _call)
    puts "* get_root_object_id called."
    common = ORiN3::CommonResponse.new(resultCode: response_values[:result_code], detail: response_values[:detail])
    response = ORiN3::GetRootObjectIdResponse.new(
      common: common,
      userDefinedId: response_values[:user_defined_id],
      rootObjectId: response_values[:root_object_id],
    )
  end

  def shutdown(request, _call)
    puts "* shutdown called."
    common = ORiN3::CommonResponse.new(resultCode: response_values[:result_code], detail: response_values[:detail])
    response = ORiN3::ShutdownResponse.new(
      common: common,
    )
  end
end

class VariableServiceMockServer < ORiN3::VariableService::Service
  attr_accessor :response_values
  
  def initialize
    @response_values = {
      result_code: 0,
      detail: "",
      value_type: ORiN3ValueType::ORiN3Bool,
      raw_value: true,
    }
  end
  
  def get_value(request, _call)
    puts "* get_value called."
    common = ORiN3::CommonResponse.new(resultCode: response_values[:result_code], detail: response_values[:detail])
    raw_value = ORiN3::ORiN3Bool.new(
      rawValue: response_values[:raw_value],
    )
    value = ORiN3::ORiN3Value.new(
      type: response_values[:value_type],
      bool: raw_value,
    )
    response = ORiN3::GetValueResponse.new(
      common: common,
      value: value,
    )
  end
end

class ORiN3ProviderTest < Minitest::Test
  def setup
    @port = 50051
    @server_thread = Thread.new { run_mock_server(@port) }
    sleep(1) # waiting for server
  end

  def teardown
    Thread.kill(@server_thread)
  end

  def run_mock_server(port)
    server = GRPC::RpcServer.new
    server.add_http2_port("localhost:#{port}", :this_port_is_insecure)
    @root_object_service_mock_server = RootObjectServiceMockServer.new
    server.handle(@root_object_service_mock_server)
    @variable_service_mock_server = VariableServiceMockServer.new
    server.handle(@variable_service_mock_server)
    server.run_till_terminated
  end

  def test_get_root_object_id
    puts "......................."
    sut = ORiN3::RootObjectService::Stub.new("localhost:#{@port}", :this_channel_is_insecure)
    @root_object_service_mock_server.response_values[:result_code] = :SUCCEEDED
    @root_object_service_mock_server.response_values[:detail] = ""
    @root_object_service_mock_server.response_values[:user_defined_id] = "\x12\x34".b
    @root_object_service_mock_server.response_values[:root_object_id] = "\x56\x78".b

    request = ORiN3::GetRootObjectIdRequest.new(common: ORiN3::CommonRequest.new)
    response = sut.get_root_object_id(request)

    puts "Result code: #{response.common.resultCode}"
    assert_equal :SUCCEEDED, response.common.resultCode
    puts "Detail: #{response.common.detail}"
    assert_equal "", response.common.detail
    puts "User defined Id: #{response.userDefinedId.unpack1('H*')}"
    assert_equal "\x12\x34".b, response.userDefinedId
    puts "Root object Id: #{response.rootObjectId.unpack1('H*')}"
    assert_equal "\x56\x78".b, response.rootObjectId

    @root_object_service_mock_server.response_values[:result_code] = :DEFAULT_ERROR
    @root_object_service_mock_server.response_values[:detail] = "hoge"
    @root_object_service_mock_server.response_values[:user_defined_id] = "\x9A\xBC".b
    @root_object_service_mock_server.response_values[:root_object_id] = "\xDE\xF0".b

    request = ORiN3::GetRootObjectIdRequest.new(common: ORiN3::CommonRequest.new)
    response = sut.get_root_object_id(request)

    puts "Result code: #{response.common.resultCode}"
    assert_equal :DEFAULT_ERROR, response.common.resultCode
    puts "Detail: #{response.common.detail}"
    assert_equal "hoge", response.common.detail
    puts "User defined Id: #{response.userDefinedId.unpack1('H*')}"
    assert_equal "\x9A\xBC".b, response.userDefinedId
    puts "Root object Id: #{response.rootObjectId.unpack1('H*')}"
    assert_equal "\xDE\xF0".b, response.rootObjectId
  end

  def test_shutdown
    puts "......................."
    sut = ORiN3::RootObjectService::Stub.new("localhost:#{@port}", :this_channel_is_insecure)
    @root_object_service_mock_server.response_values[:result_code] = :SUCCEEDED
    @root_object_service_mock_server.response_values[:detail] = ""

    request = ORiN3::ShutdownRequest.new(common: ORiN3::CommonRequest.new)
    response = sut.shutdown(request)

    puts "Result code: #{response.common.resultCode}"
    assert_equal :SUCCEEDED, response.common.resultCode
    puts "Detail: #{response.common.detail}"
    assert_equal "", response.common.detail

    @root_object_service_mock_server.response_values[:result_code] = :DEFAULT_ERROR
    @root_object_service_mock_server.response_values[:detail] = "hoge"

    request = ORiN3::ShutdownRequest.new(common: ORiN3::CommonRequest.new)
    response = sut.shutdown(request)

    puts "Result code: #{response.common.resultCode}"
    assert_equal :DEFAULT_ERROR, response.common.resultCode
    puts "Detail: #{response.common.detail}"
    assert_equal "hoge", response.common.detail
  end

  def test_get_value
    puts "......................."
    sut = ORiN3::VariableService::Stub.new("localhost:#{@port}", :this_channel_is_insecure)
    @variable_service_mock_server.response_values[:result_code] = :SUCCEEDED
    @variable_service_mock_server.response_values[:detail] = ""

    request = ORiN3::GetValueRequest.new(common: ORiN3::CommonRequest.new, id: "\x12\x34".b, valueType: 3)
    response = sut.get_value(request)

    puts "Result code: #{response.common.resultCode}"
    assert_equal :SUCCEEDED, response.common.resultCode
    puts "Detail: #{response.common.detail}"
    assert_equal "", response.common.detail
    puts "Value type: #{response.value.type}"
    assert_equal ORiN3ValueType::ORiN3Bool, response.value.type
    puts "Value: #{response.value.bool.rawValue}"
    assert_equal true, response.value.bool.rawValue
  end
end