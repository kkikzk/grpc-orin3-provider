require 'logger'
require 'minitest/autorun'
require 'minitest/hooks/default'
require 'minitest/autorun'
require_relative '../lib/grpc/orin3/provider'

$logger = Logger.new(STDOUT)
$logger.formatter = proc do |severity, datetime, progname, msg|
  "[#{datetime}] #{severity}: #{msg}\n"
end

module ORiN3
  include Design::ORiN3::Common::V1::AutoGenerated
  include Design::ORiN3::Common::RemoteEngine::V1::AutoGenerated
  include Message::ORiN3::RemoteEngine::V1::AutoGenerated
  include Message::ORiN3::Provider::V1::AutoGenerated
  include Message::ORiN3::Provider::V1::AutoGenerated::BaseObject
  include Message::ORiN3::Provider::V1::AutoGenerated::RootObject
  include Message::ORiN3::Provider::V1::AutoGenerated::Variable
end

class BaseObjectServiceMockServer < ORiN3::BaseObjectService::Service
  attr_accessor :response_values

  def initialize
    @response_values = {
      result_code: 0,
      detail: "",
    }
  end

  def get_object_info(request, _call)
    $logger.info "* get_object_info called."
    common = ORiN3::CommonResponse.new(result_code: response_values[:result_code], detail: response_values[:detail])
    response = ORiN3::GetObjectInfoResponse.new(
      common: common,
      name: "hoge",
      type_name: "fuga",
      option: "hoge_fuga",
      created_datetime: int64_value = Grpc::ORiN3::Provider::DateTimeConverter.to_int64(Time.now.utc),
      object_type: :PROVIDER_ROOT,
      extra: 0,
    )
  end
end

class RootObjectServiceMockServer < ORiN3::RootObjectService::Service
  attr_accessor :response_values

  def initialize
    @response_values = {
      result_code: 0,
      detail: "",
      user_defined_id: "\x12\x34\x56\x78\x9A\xBC\xDE\xF0".b,
      root_object_id: "\x12\x34\x56\x78\x9A\xBC\xDE\xF0".b
    }
  end

  def get_root_object_id(request, _call)
    $logger.info "* get_root_object_id called."
    common = ORiN3::CommonResponse.new(result_code: response_values[:result_code], detail: response_values[:detail])
    response = ORiN3::GetRootObjectIdResponse.new(
      common: common,
      user_defined_id: response_values[:user_defined_id],
      root_object_id: response_values[:root_object_id],
    )
  end

  def shutdown(request, _call)
    $logger.info "* shutdown called."
    common = ORiN3::CommonResponse.new(result_code: response_values[:result_code], detail: response_values[:detail])
    response = ORiN3::ShutdownResponse.new(
      common: common,
    )
  end
end

class VariableServiceMockServer < ORiN3::VariableService::Service
  attr_accessor :response_values
  
  def initialize
    @response_values = {
      result_code: 0,
      detail: "",
      value_type: :ORiN3_BOOL,
      raw_value: true,
    }
  end
  
  def get_value(request, _call)
    $logger.info "* get_value called."
    common = ORiN3::CommonResponse.new(result_code: response_values[:result_code], detail: response_values[:detail])
    raw_value = ORiN3::ORiN3Bool.new(
      raw_value: response_values[:raw_value],
    )
    value = ORiN3::ORiN3Value.new(
      type: response_values[:value_type],
      bool: raw_value,
    )
    response = ORiN3::GetValueResponse.new(
      common: common,
      value: value,
    )
  end
end

class ORiN3ProviderTest < Minitest::Test
  include Minitest::Hooks

  def before_all
    puts "......................."
    $logger.info "* before_all called."
    @port = 50051
    @channel = GRPC::Core::Channel.new("localhost:#{@port}", nil, :this_channel_is_insecure)
    @server_thread = Thread.new { run_mock_server(@port) }
    sleep(1) # waiting for server
    $logger.info "* before_all finished."
  end

  def after_all
    puts "......................."
    $logger.info "* after_all called."
    Thread.kill(@server_thread)
    $logger.info "* after_all finished."
  end

  def setup
    puts "......................."
    $logger.info "* setup called."
  end

  def teardown
    $logger.info "* teardown called."
  end

  def run_mock_server(port)
    server = GRPC::RpcServer.new
    server.add_http2_port("localhost:#{port}", :this_port_is_insecure)
    @base_object_service_mock_server = BaseObjectServiceMockServer.new
    server.handle(@base_object_service_mock_server)
    @root_object_service_mock_server = RootObjectServiceMockServer.new
    server.handle(@root_object_service_mock_server)
    @variable_service_mock_server = VariableServiceMockServer.new
    server.handle(@variable_service_mock_server)
    server.run_till_terminated
  end

  def test_get_object_info
    $logger.info "* test_get_object_info called."
    sut = ORiN3::BaseObjectService::Stub.new(nil, :this_channel_is_insecure, channel_override: @channel)
    @root_object_service_mock_server.response_values[:result_code] = :SUCCEEDED
    @root_object_service_mock_server.response_values[:detail] = ""
    request = ORiN3::GetObjectInfoRequest.new(common: ORiN3::CommonRequest.new, id: "\x12\x34".b)
    response = sut.get_object_info(request)

    $logger.info "Result code: #{response.common.result_code}"
    assert_equal :SUCCEEDED, response.common.result_code
    $logger.info "Detail: #{response.common.detail}"
    assert_equal "", response.common.detail
    $logger.info "Name: #{response.name}"
    assert_equal "hoge", response.name
    $logger.info "Type name: #{response.type_name}"
    assert_equal "fuga", response.type_name
    $logger.info "Option: #{response.option}"
    assert_equal "hoge_fuga", response.option
    $logger.info "Created datetime: #{Grpc::ORiN3::Provider::DateTimeConverter.from_int64(response.created_datetime)}"
    $logger.info "Object type: #{response.object_type}"
    assert_equal :PROVIDER_ROOT, response.object_type
    $logger.info "extra: #{response.extra}"
    assert_equal 0, response.extra
  end

  def test_get_root_object_id
    $logger.info "* test_get_root_object_id called."
    #sut = ORiN3::RootObjectService::Stub.new("192.168.68.52:58557", :this_channel_is_insecure)
    sut = ORiN3::RootObjectService::Stub.new(nil, :this_channel_is_insecure, channel_override: @channel)
    @root_object_service_mock_server.response_values[:result_code] = :SUCCEEDED
    @root_object_service_mock_server.response_values[:detail] = ""
    @root_object_service_mock_server.response_values[:user_defined_id] = "\x12\x34".b
    @root_object_service_mock_server.response_values[:root_object_id] = "\x56\x78".b

    request = ORiN3::GetRootObjectIdRequest.new(common: ORiN3::CommonRequest.new)
    response = sut.get_root_object_id(request)

    $logger.info "Result code: #{response.common.result_code}"
    assert_equal :SUCCEEDED, response.common.result_code
    $logger.info "Detail: #{response.common.detail}"
    assert_equal "", response.common.detail
    $logger.info "User defined Id: #{response.user_defined_id.unpack1('H*')}"
    assert_equal "\x12\x34".b, response.user_defined_id
    $logger.info "Root object Id: #{response.root_object_id.unpack1('H*')}"
    assert_equal "\x56\x78".b, response.root_object_id

    @root_object_service_mock_server.response_values[:result_code] = :DEFAULT_ERROR
    @root_object_service_mock_server.response_values[:detail] = "hoge"
    @root_object_service_mock_server.response_values[:user_defined_id] = "\x9A\xBC".b
    @root_object_service_mock_server.response_values[:root_object_id] = "\xDE\xF0".b

    request = ORiN3::GetRootObjectIdRequest.new(common: ORiN3::CommonRequest.new)
    response = sut.get_root_object_id(request)

    $logger.info "Result code: #{response.common.result_code}"
    assert_equal :DEFAULT_ERROR, response.common.result_code
    $logger.info "Detail: #{response.common.detail}"
    assert_equal "hoge", response.common.detail
    $logger.info "User defined Id: #{response.user_defined_id.unpack1('H*')}"
    assert_equal "\x9A\xBC".b, response.user_defined_id
    $logger.info "Root object Id: #{response.root_object_id.unpack1('H*')}"
    assert_equal "\xDE\xF0".b, response.root_object_id
  end

  def test_shutdown
    $logger.info "* test_shutdown called."
    sut = ORiN3::RootObjectService::Stub.new(nil, :this_channel_is_insecure, channel_override: @channel)
    @root_object_service_mock_server.response_values[:result_code] = :SUCCEEDED
    @root_object_service_mock_server.response_values[:detail] = ""

    request = ORiN3::ShutdownRequest.new(common: ORiN3::CommonRequest.new)
    response = sut.shutdown(request)

    $logger.info "Result code: #{response.common.result_code}"
    assert_equal :SUCCEEDED, response.common.result_code
    $logger.info "Detail: #{response.common.detail}"
    assert_equal "", response.common.detail

    @root_object_service_mock_server.response_values[:result_code] = :DEFAULT_ERROR
    @root_object_service_mock_server.response_values[:detail] = "hoge"

    request = ORiN3::ShutdownRequest.new(common: ORiN3::CommonRequest.new)
    response = sut.shutdown(request)

    $logger.info "Result code: #{response.common.result_code}"
    assert_equal :DEFAULT_ERROR, response.common.result_code
    $logger.info "Detail: #{response.common.detail}"
    assert_equal "hoge", response.common.detail
  end
end